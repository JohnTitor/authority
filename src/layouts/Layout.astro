---
import "@fontsource-variable/noto-sans-jp";

import ConfigCarrier from "@components/ConfigCarrier.astro";
import { profileConfig, siteConfig } from "@/config";
import {
	AUTO_MODE,
	DARK_MODE,
	DEFAULT_THEME,
	LIGHT_MODE,
	PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import { setI18nLocale } from "../i18n/translation";
import type { Favicon } from "../types/config";
import { url } from "../utils/url-utils";

interface Props {
	title?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
	ogImage?: string;
}

let { title, description, lang, setOGTypeArticle, ogImage } = Astro.props;

const urlLocale =
	Astro.url.pathname.startsWith("/en/") || Astro.url.pathname === "/en"
		? "en"
		: "ja";

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;

let pageTitle: string;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title}`;
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
	lang = urlLocale || `${siteConfig.lang}`;
}
setI18nLocale(lang);
const siteLang = lang.replace("_", "-");
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
		data-overlayscrollbars-initialize
>
	<head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>
		{setOGTypeArticle ? (
				<meta property="og:type" content="article" />
				) : (
				<meta property="og:type" content="website" />
				)}
		{ogImage && <meta property="og:image" content={new URL(ogImage, Astro.url).href} />}

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>
		{ogImage && <meta name="twitter:image" content={new URL(ogImage, Astro.url).href} />}

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="apple-touch-icon" href={url('/apple-touch-icon.png')} />
		{favicons.map(favicon => (
			<link rel="icon"
					href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
					sizes={favicon.sizes}
			/>
		))}
		<link rel="manifest" href={url('/site.webmanifest')} />

		<script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, PAGE_WIDTH, configHue}}>
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}

			const hue = localStorage.getItem('hue') || configHue;
			document.documentElement.style.setProperty('--hue', hue);
		</script>
		<style define:vars={{
			configHue,
			'page-width': `${PAGE_WIDTH}rem`,
		}}></style>

		<slot name="head"></slot>

		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>
		
		<!-- Performance Optimizations -->
		<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
		<link rel="preconnect" href="https://www.googletagmanager.com" crossorigin>
		<link rel="dns-prefetch" href="//fonts.gstatic.com">
		
		<!-- Critical CSS Preload -->
		<link rel="preload" href="/fonts/jetbrains-mono-variable.woff2" as="font" type="font/woff2" crossorigin>
		<link rel="preload" href="/fonts/noto-sans-jp-variable.woff2" as="font" type="font/woff2" crossorigin>
		
		<!-- Resource Hints -->
		<link rel="prefetch" href="/pagefind/pagefind.js">

		<!-- Google tag (gtag.js) -->
		<script is:inline type="text/partytown" async src="https://www.googletagmanager.com/gtag/js?id=G-V4WEXSY81M"></script>
		<script is:inline type="text/partytown">
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());

			gtag('config', 'G-V4WEXSY81M');
		</script>
	</head>
	<body class=" min-h-screen transition " data-overlayscrollbars-initialize
	>
		<ConfigCarrier></ConfigCarrier>
		<slot />

		<div id="page-height-extend" class="hidden h-[300vh]"></div>
	</body>
</html>

<style is:global>
@tailwind components;
@layer components {
	.navbar-hidden {
		@apply opacity-0 -translate-y-16
	}
	
	/* Image loading improvements */
	.custom-md img, #post-cover img {
		transition: opacity 0.3s ease-in-out;
		background-color: var(--card-bg);
		border-radius: 0.5rem;
	}
	
	.custom-md img.loading, #post-cover img.loading {
		opacity: 0.5;
		background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
		background-size: 200% 100%;
		animation: loading-shimmer 1.5s infinite;
	}
	
	@keyframes loading-shimmer {
		0% { background-position: -200% 0; }
		100% { background-position: 200% 0; }
	}
	
	/* Prevent layout shift for images */
	.custom-md img[width][height], #post-cover img[width][height] {
		aspect-ratio: attr(width) / attr(height);
		width: 100%;
		height: auto;
	}
	
	/* PhotoSwipe loading indicator */
	.pswp--open .pswp__bg {
		transition: opacity 0.3s ease-in-out;
	}
}
</style>

<script>
import { getHue, getStoredTheme, setHue, setTheme } from "../utils/setting-utils";

let OverlayScrollbars: any;
let isScrollbarLoaded = false;

// Lazy load OverlayScrollbars
async function loadScrollbars() {
	if (isScrollbarLoaded) return OverlayScrollbars;
	
	const [scrollbarModule] = await Promise.all([
		import('overlayscrollbars'),
		import('overlayscrollbars/overlayscrollbars.css')
	]);
	
	OverlayScrollbars = scrollbarModule.OverlayScrollbars;
	isScrollbarLoaded = true;
	return OverlayScrollbars;
}

function setClickOutsideToClose(panel: string, ignores: string[]) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		if (!(tDom instanceof Node)) return;		// Ensure the event target is an HTML Node
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom!.classList.add("float-panel-closed");
	});
}

function loadTheme() {
	const theme = getStoredTheme()
	setTheme(theme)
}

function loadHue() {
	setHue(getHue())
}

async function initCustomScrollbar() {
	const bodyElement = document.querySelector('body');
	if (!bodyElement) return;
	
	const ScrollbarClass = await loadScrollbars();
	
	ScrollbarClass(
		// docs say that a initialization to the body element would affect native functionality like window.scrollTo
		// but just leave it here for now
		{
			target: bodyElement,
			cancel: {
				nativeScrollbarsOverlaid: true,		// don't initialize the overlay scrollbar if there is a native one
			}
		}, {
		scrollbars: {
			theme: 'scrollbar-base scrollbar-auto py-1',
			autoHide: 'move',
			autoHideDelay: 500,
			autoHideSuspend: false,
		},
	});
}

function init() {
	loadTheme();
	loadHue();
	
	// Defer scrollbar initialization until after page is fully loaded
	if (document.readyState === 'complete') {
		setTimeout(initCustomScrollbar, 100);
	} else {
		window.addEventListener('load', () => setTimeout(initCustomScrollbar, 100));
	}
	
	// Setup panel click handlers
	setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
	setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
	setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])
}

/* Load settings when entering the site */
init();

const setup = () => {
	window.swup.hooks.on('link:click', () => {
		// Remove the delay for the first time page load
		document.documentElement.style.setProperty('--content-delay', '0ms')
	})
	window.swup.hooks.on('content:replace', initCustomScrollbar)
	window.swup.hooks.on('visit:start', () => {
		// increase the page height during page transition to prevent the scrolling animation from jumping
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}

		// Hide the TOC while scrolling back to top
		let toc = document.getElementById('toc-wrapper');
		if (toc) {
			toc.classList.add('toc-not-ready')
		}
	});
	window.swup.hooks.on('page:view', () => {
		// hide the temp high element when the transition is done
		const heightExtend = document.getElementById('page-height-extend')
		if (heightExtend) {
			heightExtend.classList.remove('hidden')
		}
	});
	window.swup.hooks.on('visit:end', (_visit: {to: {url: string}}) => {
		setTimeout(() => {
			const heightExtend = document.getElementById('page-height-extend')
			if (heightExtend) {
				heightExtend.classList.add('hidden')
			}

						// Just make the transition looks better
						const toc = document.getElementById('toc-wrapper');
						if (toc) {
								toc.classList.remove('toc-not-ready')
						}
				}, 200)
	});
}
if (window?.swup?.hooks) {
	setup()
} else {
	document.addEventListener('swup:enable', setup)
}
</script>

<script>
// PhotoSwipe state management
let lightbox: any = null;
let isPhotoSwipeLoaded = false;
let PhotoSwipeLightbox: any = null;
let pswpModule: any = null;
let initializationPromise: Promise<void> | null = null;

// Preload PhotoSwipe modules
async function preloadPhotoSwipe(): Promise<void> {
	if (isPhotoSwipeLoaded) return;
	
	try {
		const [lightboxModule, pswpModuleImport] = await Promise.all([
			import("photoswipe/lightbox"),
			import("photoswipe"),
			import("photoswipe/style.css")
		]);
		
		PhotoSwipeLightbox = lightboxModule.default;
		pswpModule = pswpModuleImport;
		isPhotoSwipeLoaded = true;
	} catch (error) {
		console.warn('Failed to load PhotoSwipe:', error);
	}
}

// Initialize PhotoSwipe for current page
function initializePhotoSwipe(): void {
	// Prevent multiple simultaneous initializations
	if (initializationPromise) return;
	
	initializationPromise = new Promise(async (resolve) => {
		try {
			// Clean up existing instance
			if (lightbox) {
				try {
					lightbox.destroy();
				} catch (e) {
					console.warn('Error destroying previous PhotoSwipe instance:', e);
				}
				lightbox = null;
			}

			// Check if there are images on the page
			const images = document.querySelectorAll(".custom-md img, #post-cover img");
			if (images.length === 0) {
				resolve();
				return;
			}

			// Ensure PhotoSwipe is loaded
			await preloadPhotoSwipe();
			
			if (!PhotoSwipeLightbox || !pswpModule) {
				console.warn('PhotoSwipe modules not available');
				resolve();
				return;
			}

			// Create new PhotoSwipe instance
			lightbox = new PhotoSwipeLightbox({
				gallery: ".custom-md img, #post-cover img",
				pswpModule: () => pswpModule,
				closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
				zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
				padding: { top: 20, bottom: 20, left: 20, right: 20 },
				wheelToZoom: true,
				arrowPrev: false,
				arrowNext: false,
				imageClickAction: 'close',
				tapAction: 'close',
				doubleTapAction: 'zoom',
			});

			lightbox.addFilter("domItemData", (itemData: any, element: any) => {
				if (element instanceof HTMLImageElement) {
					itemData.src = element.src;
					itemData.w = Number(element.naturalWidth || window.innerWidth);
					itemData.h = Number(element.naturalHeight || window.innerHeight);
					itemData.msrc = element.src;
				}
				return itemData;
			});

			lightbox.init();
			console.log('PhotoSwipe initialized successfully');
			
		} catch (error) {
			console.error('Error initializing PhotoSwipe:', error);
		}
		
		initializationPromise = null;
		resolve();
	});
}

// Handle image loading states
function handleImageLoading(): void {
	const images = document.querySelectorAll(".custom-md img, #post-cover img");
	images.forEach((img) => {
		const imageElement = img as HTMLImageElement;
		if (!imageElement.complete) {
			imageElement.classList.add('loading');
			imageElement.style.opacity = '0.5';
			
			const handleLoad = () => {
				imageElement.classList.remove('loading');
				imageElement.style.opacity = '1';
				// Initialize PhotoSwipe after images load
				setTimeout(initializePhotoSwipe, 50);
			};

			const handleError = () => {
				imageElement.classList.remove('loading');
				imageElement.style.opacity = '1';
			};

			imageElement.addEventListener('load', handleLoad, { once: true });
			imageElement.addEventListener('error', handleError, { once: true });
		}
	});
}

// Clean up PhotoSwipe
function cleanupPhotoSwipe(): void {
	if (lightbox) {
		try {
			lightbox.destroy();
		} catch (e) {
			console.warn('Error cleaning up PhotoSwipe:', e);
		}
		lightbox = null;
	}
	initializationPromise = null;
}

// Setup for page navigation
function setupPageHandlers(): void {
	// Initial page setup
	handleImageLoading();
	
	// Wait for images and DOM to be ready, then initialize PhotoSwipe
	if (document.readyState === 'complete') {
		setTimeout(initializePhotoSwipe, 100);
	} else {
		window.addEventListener('load', () => {
			setTimeout(initializePhotoSwipe, 100);
		});
	}
	
	// Swup navigation handlers
	if (window.swup) {
		// Before content replacement - clean up
		window.swup.hooks.on('content:replace', cleanupPhotoSwipe, { before: true });
		
		// After page transition - reinitialize
		window.swup.hooks.on('page:view', () => {
			handleImageLoading();
			
			// Multiple attempts to ensure initialization after DOM settling
			setTimeout(initializePhotoSwipe, 50);
			setTimeout(initializePhotoSwipe, 200);
			setTimeout(initializePhotoSwipe, 500);
		});
		
		// Additional hook for content replacement completion
		window.swup.hooks.on('content:replace', () => {
			setTimeout(() => {
				handleImageLoading();
				initializePhotoSwipe();
			}, 100);
		});
	}
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
	document.addEventListener('DOMContentLoaded', setupPageHandlers);
} else {
	setupPageHandlers();
}

// Setup Swup handlers when Swup is available
if (window.swup) {
	setupPageHandlers();
} else {
	document.addEventListener('swup:enable', setupPageHandlers);
}

// Debug helper
(window as any).debugPhotoSwipe = () => {
	console.log('PhotoSwipe Debug:', {
		lightbox: !!lightbox,
		isLoaded: isPhotoSwipeLoaded,
		images: document.querySelectorAll(".custom-md img, #post-cover img").length,
		initPromise: !!initializationPromise
	});
};
</script>
